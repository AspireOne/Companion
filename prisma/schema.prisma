generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  username      String?          @unique
  bio           String?
  accounts      Account[]
  Bot           Bot[]
  BotMessage    BotChatMessage[]
  ChatMessage   ChatMessage[]
  sessions      Session[]
  Chat          Chat[]           @relation("ChatToUser")
}

model Bot {
  id          String           @id @default(cuid())
  name        String
  description String
  img         String           @default("https://w0.peakpx.com/wallpaper/805/384/HD-wallpaper-anime-girl-babes-modeling-skirt-thicc-babe-hot-naked-cute.jpg")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  creatorId   String?
  source      BotSource
  visibility  Visibility
  creator     User?            @relation(fields: [creatorId], references: [id])
  messages    BotChatMessage[]
}

model BotChatMessage {
  id        Int         @id @default(autoincrement())
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String
  botId     String
  botMode   BotMode
  role      BotChatRole
  bot       Bot         @relation(fields: [botId], references: [id])
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chat {
  id       String        @id @default(cuid())
  messages ChatMessage[]
  users    User[]        @relation("ChatToUser")
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Visibility {
  PUBLIC
  LINK
  PRIVATE
}

enum BotSource {
  OFFICIAL
  COMMUNITY
}

enum BotChatRole {
  USER
  BOT
}

enum BotMode {
  ROLEPLAY
  ADVENTURE
  CHAT
}
