generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // User uid.
  id       String  @id @unique
  // Basic user info - most also gotten from OAuth.
  name     String?
  email    String  @unique
  image    String  @default("https://github-production-user-asset-6210df.s3.amazonaws.com/57546404/280538836-8c16b1b3-391f-4cdf-889c-e2e279f3167b.png")
  username String  @unique

  bio              String?
  botContext       String?
  addressedAs      String?         @default("Senpai")
  Bot              Bot[]
  BotLikes         BotLike[]
  BotDislikes      BotDislike[]
  BotShares        BotShares[]
  RRAvailableUsers RRChatQueue[]
  Assets           Asset[]
  BotChats         Chat[]
  ForumPosts       ForumPost[]
  ForumPostLikes   ForumPostLike[]
  Quota            UserQuota?
}

model UserQuota {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  quotaToDay DateTime @default(now())
  messages  Int      @default(0)
}

enum CharacterTag {
  GIRLFRIEND
  BOYFRIEND
  ROMANCE
  FANTASY
  SUPERNATURAL
  FEMALE
  MALE
  HORROR
  HERO
  COMEDY
  NERD
  SHY
  BAD
  ANIME
  GAME_CHARACTER
  HISTORY
  MOVIE
  MONSTER
  BOOKS
  OC
}

model Bot {
  // Public info.
  id          String @id @default(cuid())
  title       String
  description String

  // Character info.
  name            String
  persona         String
  nsfw            Boolean       @default(false)
  exampleDialogue String?
  visibility      BotVisibility

  // Character images.
  avatar          String  @default("https://github-production-user-asset-6210df.s3.amazonaws.com/57546404/280540176-f3d0aacb-e4f7-472c-9bf5-b19a4058581d.jpg")
  backgroundImage String  @default("https://i.pinimg.com/originals/60/cb/46/60cb4600ad2427938722b77faba6426a.png")
  characterImage  String?

  // Creator.
  creatorId String?
  creator   User?     @relation(fields: [creatorId], references: [id])
  source    BotSource

  // Likes | Dislikes | Shares.
  botLikes    BotLike[]
  botDislikes BotDislike[]
  BotShares   BotShares[]

  // Other relations.
  tags           CharacterTag[]
  BotChats       Chat[]
  categoryId     String?
  category       Category?        @relation(fields: [categoryId], references: [name])
  InitialMessage InitialMessage[]

  // Mood.
  MoodTable         MoodTable?
  moodImagesEnabled Boolean    @default(false)
  sadImageId        String?
  blushedImageId    String?
  neutralImageId    String?
  happyImageId      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Contains mapping of moods to their respective images.
model MoodTable {
  id String @id @default(cuid())

  angry     String?
  happy     String?
  sad       String?
  confident String?
  confused  String?
  shy       String?
  excited   String?
  scared    String?

  botId String @unique
  bot   Bot    @relation(fields: [botId], references: [id])
}

model BotLike {
  id        String   @id @default(cuid())
  botId     String
  userId    String
  bot       Bot      @relation(fields: [botId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model BotDislike {
  id        String   @id @default(cuid())
  botId     String
  userId    String
  bot       Bot      @relation(fields: [botId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model BotShares {
  id        String   @id @default(cuid())
  botId     String
  userId    String
  bot       Bot      @relation(fields: [botId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Chat {
  id          String    @id @default(cuid())
  mode        ChatMode
  userContext String?
  botId       String
  userId      String
  bot         Bot       @relation(fields: [botId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  messages    Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  chatId     String
  chat       Chat     @relation(fields: [chatId], references: [id])
  content    String
  mood       Mood     @default(NEUTRAL)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  role       ChatRole
  remembered Boolean  @default(false)
}

model InitialMessage {
  chatMode  ChatMode
  message   String
  botId     String
  bot       Bot      @relation(fields: [botId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([botId, chatMode])
}

model Category {
  name       String      @id @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  ForumPosts ForumPost[]
  Bots       Bot[]
}

model RRChatQueue {
  userId    String   @id
  channel   String?
  topic     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Asset {
  id        String   @id @unique
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//<editor-fold desc="Forum">
model ForumPost {
  id           String          @id @default(cuid())
  bannerImage  String?
  categoryname String?
  category     Category?       @relation(fields: [categoryname], references: [name])
  title        String?
  content      String
  author       User            @relation(fields: [authorId], references: [id])
  authorId     String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  likeCount    BigInt          @default(0)
  viewCount    BigInt          @default(0)
  likes        ForumPostLike[]
  comments     ForumPost[]     @relation("CommentToPost")
  parentPost   ForumPost?      @relation("CommentToPost", fields: [parentPostId], references: [id])
  parentPostId String?
}

model ForumPostLike {
  id        String    @id @default(cuid())
  postId    String
  userId    String
  post      ForumPost @relation(fields: [postId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
}

//</editor-fold>

enum Mood {
  NEUTRAL
  HAPPY
  SAD
  BLUSHED
}

enum BotVisibility {
  PUBLIC
  LINK
  PRIVATE
}

enum BotSource {
  OFFICIAL
  COMMUNITY
}

enum ChatRole {
  USER
  BOT
}

enum ChatMode {
  ROLEPLAY
  ADVENTURE
  CHAT
}
