generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // User uid.
  id       String  @id @unique
  // Basic user info - most also gotten from OAuth.
  name     String?
  email    String? @unique
  image    String?
  username String  @unique

  bio              String?
  about            String?
  addressedAs      String?         @default("Senpai")
  Bot              Bot[]
  ChatMessage      ChatMessage[]
  Chat             Chat[]          @relation("ChatToUser")
  BotLikes         BotLike[]
  BotDislikes      BotDislike[]
  BotShares        BotShares[]
  RRAvailableUsers RRChatQueue[]
  Assets           Asset[]
  BotChats         BotChat[]
  ForumPosts       ForumPost[]
  ForumPostLikes   ForumPostLike[]
}

model Asset {
  id        String   @id @unique
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Contains mapping of moods to their respective images.
model MoodTable {
  id String @id @default(cuid())

  angry     String?
  happy     String?
  sad       String?
  confident String?
  confused  String?
  shy       String?
  excited   String?
  scared    String?

  botId String @unique
  bot   Bot    @relation(fields: [botId], references: [id])
}

enum Mood {
  NEUTRAL
  HAPPY
  SAD
  BLUSHED
}

model Bot {
  id                String       @id @default(cuid())
  name              String
  description       String
  categoryId        String?
  category          Category?    @relation(fields: [categoryId], references: [name])
  characterName     String
  characterPersona  String
  characterDialogue String?
  characterNsfw     Boolean      @default(false)
  avatar            String?      @default("https://w0.peakpx.com/wallpaper/805/384/HD-wallpaper-anime-girl-babes-modeling-skirt-thicc-babe-hot-naked-cute.jpg")
  cover             String?      @default("https://w0.peakpx.com/wallpaper/805/384/HD-wallpaper-anime-girl-babes-modeling-skirt-thicc-babe-hot-naked-cute.jpg")
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  creatorId         String?
  tags              Tag[]
  source            BotSource
  visibility        Visibility
  creator           User?        @relation(fields: [creatorId], references: [id])
  botLikes          BotLike[]
  botDislikes       BotDislike[]
  BotShares         BotShares[]
  MoodTable         MoodTable?
  BotChats          BotChat[]
  // Mood images
  moodImagesEnabled Boolean      @default(false)
  sadImageId        String?
  blushedImageId    String?
  neutralImageId    String?
  happyImageId      String?
}

model Tag {
  name      String   @id
  bots      Bot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BotLike {
  id        String   @id @default(cuid())
  botId     String
  userId    String
  bot       Bot      @relation(fields: [botId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model BotDislike {
  id        String   @id @default(cuid())
  botId     String
  userId    String
  bot       Bot      @relation(fields: [botId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model BotShares {
  id        String   @id @default(cuid())
  botId     String
  userId    String
  bot       Bot      @relation(fields: [botId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model BotChat {
  id       String           @id @default(cuid())
  botMode  BotMode
  userContext String?
  botId    String
  userId   String
  bot      Bot              @relation(fields: [botId], references: [id])
  user     User             @relation(fields: [userId], references: [id])
  messages BotChatMessage[]
}

model BotChatMessage {
  id        Int         @id @default(autoincrement())
  chat      BotChat     @relation(fields: [chatId], references: [id])
  chatId    String
  content   String
  mood      Mood        @default(NEUTRAL)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  role      BotChatRole
}

model Chat {
  id       String        @id @default(cuid())
  messages ChatMessage[]
  users    User[]        @relation("ChatToUser")
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  name       String      @id @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  ForumPosts ForumPost[]
  Bots       Bot[]
}

model ForumPost {
  id           String          @id @default(cuid())
  bannerImage  String?
  categoryname String?
  category     Category?       @relation(fields: [categoryname], references: [name])
  title        String?
  content      String
  author       User            @relation(fields: [authorId], references: [id])
  authorId     String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  likeCount    BigInt          @default(0)
  viewCount    BigInt          @default(0)
  likes        ForumPostLike[]
  comments     ForumPost[]     @relation("CommentToPost")
  parentPost   ForumPost?      @relation("CommentToPost", fields: [parentPostId], references: [id])
  parentPostId String?
}

model ForumPostLike {
  id        String    @id @default(cuid())
  postId    String
  userId    String
  post      ForumPost @relation(fields: [postId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
}

// -> starts searching
// -> if someone already exists, remove him and assign them to a chat. Return ChatId.
// -> if no one exists, add to the db and start polling.
// -> If assigned to a chat during search, it will be polled. Return chatID.
// -> If not assigned to a chat, remove from the db and return null.

model RRChatQueue {
  userId    String   @id
  channel   String?
  topic     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Visibility {
  PUBLIC
  LINK
  PRIVATE
}

enum BotSource {
  OFFICIAL
  COMMUNITY
}

enum BotChatRole {
  USER
  BOT
}

enum BotMode {
  ROLEPLAY
  ADVENTURE
  CHAT
}
