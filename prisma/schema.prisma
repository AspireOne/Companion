// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  BotMessage    BotMessage[]
  Bot           Bot[]
}

model BotMessage {
  id        Int         @id @default(autoincrement())
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String
  botId     String
  botMode   BotMode
  role      BotChatRole

  bot  Bot  @relation(fields: [botId], references: [id])
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bot {
  id          String       @id @default(cuid())
  name        String
  description String
  public      Boolean
  creatorId   String?
  // The image will be dynamic in the future. Perhaps some variants based on mood?
  // TODO: Remove the image as a default :D
  img         String       @default("https://w0.peakpx.com/wallpaper/805/384/HD-wallpaper-anime-girl-babes-modeling-skirt-thicc-babe-hot-naked-cute.jpg")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  messages    BotMessage[]
  creator     User?        @relation(fields: [creatorId], references: [id])
}

enum BotChatRole {
  USER
  BOT
}

enum BotMode {
  ROLEPLAY
  ADVENTURE
  CHAT
}
